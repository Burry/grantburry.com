
@function color-yiq($color, $dark: $text-color, $light: #fff) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);
    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
    $yiq-contrasted-threshold: 150;

    @if ($yiq >= $yiq-contrasted-threshold) {
        @return $dark;
    }

    @else {
        @return $light;
    }
}

@mixin hover {
    &:hover { @content; }
}

@mixin hover-focus {
    &:hover,
    &:focus {
        @content;
    }
}

@mixin plain-hover-focus {
    &,
    &:hover,
    &:focus {
        @content;
    }
}

@mixin hover-focus-active {
    &:hover,
    &:focus,
    &:active {
        @content;
    }
}

@mixin button-variant($background, $border: $background, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
    background-color: $background;
    color: color-yiq($background);
    border-color: $border;

    @include hover {
        background-color: $hover-background;
        color: color-yiq($hover-background);
        border-color: $hover-border;
    }

    &:focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 0.2rem rgba(mix(color-yiq($background), $border, 15%), 0.5);
    }

    // Disabled comes first so active can properly restyle
    &:disabled {
        color: color-yiq($background);
        background-color: $background;
        border-color: $border;
    }

    &:not(:disabled):not(.disabled):active {
        color: color-yiq($active-background);
        background-color: $active-background;
        border-color: $active-border;

        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            box-shadow: 0 0 0 0.2rem rgba(mix(color-yiq($background), $border, 15%), 0.5);
        }
    }
}

@mixin triangle($color, $viewport-width-units, $duration) {
    border-width: $triangle-height #{$viewport-width-units}vw 0 0;
    border-color: $color transparent transparent transparent;
    animation: slideTriangle#{$viewport-width-units}vw #{$duration}s cubic-bezier(0.165, 0.84, 0.44, 1) 1;
}

@mixin media-triangle-fragment($width) {
    border-width: $triangle-height #{$width}vw 0 0;
    animation-name: slideTriangle#{$width}vw;
}

@mixin media-triangles($t1-width, $t2-width, $t3-width) {
    .t1 {
        @include media-triangle-fragment($t1-width);
    }

    .t2 {
        @include media-triangle-fragment($t2-width);
    }

    .t3 {
        @include media-triangle-fragment($t3-width);
    }
}

@mixin slideTriangleKeyframes($viewport-width-units) {
    @keyframes slideTriangle#{$viewport-width-units}vw {
        from {
            border-width: $triangle-height #{$viewport-width-units / 1.5}vw 0 0;
        }

        to {
            border-width: $triangle-height #{$viewport-width-units}vw 0 0;
        }
    }
}
